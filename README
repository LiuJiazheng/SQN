This is a header-only project implementing Stochastic Quansi-Newton Method(an enhanced version for Stochastic Gradient Descent Method).

The main paper we refer is A Stochastic Quasi-Newton Method for Large-Scale Optimization[arXiv:1401.7020v2] by R.HByrd, S.L Hansen, Jorge Nocedal and Y.Singer.

The modification we improve is attached, whose name is "Note".

This program aims to solve an optimazation program, by using second-order Newton method: L-BFGS method to improve the speed of convergence and accuracy of result. The framework is under stochastic gradient method, hence the inputdata is very important in this method.

input: 
The program accepts two std::string variable, argv0 is the file path of the input data, argv1 indicates the path where the log file locates.

output:
A series of files which records all the information you want. Adtionally you can use class "SQNreport" to monitor the variable you are interested in. 

A normal step to use the library is:
1)initialize the class SQNpp, in which you can re-define the parameter to control the behavior of solver.
2)initialize the class SQNreport. And you can use the member function "StartTiming/EndTiming" to record the time , member functions "StartRecordValue/StartRecordVector" to create the monitor scalar/vector variable, "AddRecordValue/AddRecordVector" to add an entry of record of related value.
3)Read input data by calling SQNpp::ReadData(). Notice: The input data must not be empty!
4)initialize the class SQNsolver,
5)define the function you are interested
6)calling SQNpp::SQNsolver::minimize(func&) to get the final result.

/////////////////////////////////////////////
About the type of input data:
right now, the program only accept regular file, which means the input must obey some rules.
In detail, the input data should obey:

(NOT IN FILE) result  feature
IN FILE       1       2 4 6 8 9
			  0       0 7 48 32 3
			  1       86 22 91 44 0

It follows the tradition in machine learning community. For a training dataset, the result(output data) should put at first, the followed by feature(input data) which are in same size.


example:
$ g++ --std=c++11 -g -Wall -I/link/to/Eigen -O2 main.cpp
$ ./a.out </absolute/path/of/InputData> <path/you/want/to/write>

